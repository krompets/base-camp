// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/* ============ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ SillyStringUtils ============ */
library SillyStringUtils {
    struct Haiku {
        string line1;
        string line2;
        string line3;
    }

    function shruggie(string memory _input) internal pure returns (string memory) {
        return string.concat(_input, unicode" ü§∑");
    }
}

/* ============ –ö–æ–Ω—Ç—Ä–∞–∫—Ç ImportsExercise ============ */
contract ImportsExercise {
    using SillyStringUtils for string;

    // –ü—É–±–ª—ñ—á–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ö–∞–π–∫—É
    SillyStringUtils.Haiku public haiku;

    /**
     * @dev –ó–±–µ—Ä—ñ–≥–∞—î —Ç—Ä–∏ —Ä—è–¥–∫–∏ —è–∫ —Ö–∞–π–∫—É.
     */
    function saveHaiku(
        string memory _line1,
        string memory _line2,
        string memory _line3
    ) public {
        haiku.line1 = _line1;
        haiku.line2 = _line2;
        haiku.line3 = _line3;
    }

    /**
     * @dev –ü–æ–≤–µ—Ä—Ç–∞—î –≤–µ—Å—å —Ö–∞–π–∫—É —è–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–ø—É Haiku.
     */
    function getHaiku() public view returns (SillyStringUtils.Haiku memory) {
        return haiku;
    }

    /**
     * @dev –°—Ç–≤–æ—Ä—é—î –∫–æ–ø—ñ—é —Ö–∞–π–∫—É, –¥–æ–¥–∞—é—á–∏ ü§∑ –¥–æ –∫—ñ–Ω—Ü—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ä—è–¥–∫–∞.
     * –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ö–∞–π–∫—É.
     */
    function shruggieHaiku() public view returns (SillyStringUtils.Haiku memory) {
        SillyStringUtils.Haiku memory newHaiku = haiku;
        newHaiku.line3 = newHaiku.line3.shruggie();
        return newHaiku;
    }
}
